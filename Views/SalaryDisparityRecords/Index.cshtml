@model PaginatedList<SalaryDisparityRecord>
@{
    ViewData["Title"] = "Salary Records for the world disparcity";
    var industries = ViewBag.Industries as List<string>;
    var genders = ViewBag.Genders as List<string>;
    var locations = ViewBag.Locations as List<string>;
}

<section class="filters">
    <h2><i class="fas fa-filter"></i> Data Filters</h2>

    <form asp-action="Index" method="get" class="filter-grid">
        <div class="filter-group">
            <label for="searchString">Search</label>
            <input type="text" name="searchString" value="@ViewData["CurrentFilter"]" placeholder="Search records...">
        </div>

        <div class="filter-group">
            <label for="industryFilter">Industry</label>
            <select name="industryFilter" asp-items="@(new SelectList(industries))">
                <option value="">All Industries</option>
            </select>
        </div>

        <div class="filter-group">
            <label for="genderFilter">Gender</label>
            <select name="genderFilter" asp-items="@(new SelectList(genders))">
                <option value="">All Genders</option>
            </select>
        </div>

        <div class="filter-group">
            <label for="locationFilter">Location</label>
            <select name="locationFilter" asp-items="@(new SelectList(locations))">
                <option value="">All Locations</option>
            </select>
        </div>

        <div class="filter-actions">
            <button type="submit" class="btn btn-primary">
                <i class="fas fa-filter"></i> Apply Filters
            </button>
            <a asp-action="Index" class="btn btn-outline">
                <i class="fas fa-sync"></i> Reset
            </a>
        </div>
    </form>
</section>

<div class="charts-row">
    <div class="chart-card">
        <div class="chart-header">
            <h3><i class="fas fa-chart-bar"></i> Average Salary by Industry</h3>
        </div>
        <div class="chart-container">
            <canvas id="barChart"></canvas>
        </div>
    </div>

    <div class="chart-card">
        <div class="chart-header">
            <h3><i class="fas fa-chart-line"></i> Salary vs Experience</h3>
        </div>
        <div class="chart-container">
            <canvas id="lineChart"></canvas>
        </div>
    </div>
</div>

<section class="data-section">
    <div class="section-header">
        <h2><i class="fas fa-table"></i> Salary Records</h2>
        <a asp-action="Create" class="add-btn">
            <i class="fas fa-plus"></i> Add New Record
        </a>
    </div>

    <div class="table-responsive">
        <table class="data-table">
            <thead>
                <tr>
                    <th>Industry</th>
                    <th>Job Title</th>
                    <th>Salary</th>
                    <th>Gender</th>
                    <th>Experience</th>
                    <th>Education</th>
                    <th>Location</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.Industry)</td>
                        <td>@Html.DisplayFor(modelItem => item.JobTitle)</td>
                        <td class="salary-cell">@Html.DisplayFor(modelItem => item.Salary)</td>
                        <td>
                            <span class="gender-cell @(item.Gender == "Male" ? "gender-male" : "gender-female")">
                                @Html.DisplayFor(modelItem => item.Gender)
                            </span>
                        </td>
                        <td>@Html.DisplayFor(modelItem => item.YearsExperience) years</td>
                        <td>@Html.DisplayFor(modelItem => item.EducationalLevel)</td>
                        <td>@Html.DisplayFor(modelItem => item.Location)</td>
                        <td class="action-cell">
                            <a asp-action="Edit" asp-route-id="@item.Id" class="action-btn edit-btn">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a asp-action="Details" asp-route-id="@item.Id" class="action-btn view-btn">
                                <i class="fas fa-eye"></i>
                            </a>
                            <a asp-action="Delete" asp-route-id="@item.Id" class="action-btn delete-btn">
                                <i class="fas fa-trash"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    @{
        var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
        var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    }

    <div class="pagination">
        <a asp-action="Index"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-pageNumber="@(Model.PageIndex - 1)"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="@prevDisabled">
            <i class="fas fa-chevron-left"></i>
        </a>

        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <a asp-action="Index"
               asp-route-sortOrder="@ViewData["CurrentSort"]"
               asp-route-pageNumber="@i"
               asp-route-currentFilter="@ViewData["CurrentFilter"]"
               class="@(i == Model.PageIndex ? "active" : "")">
                @i
            </a>
        }

        <a asp-action="Index"
           asp-route-sortOrder="@ViewData["CurrentSort"]"
           asp-route-pageNumber="@(Model.PageIndex + 1)"
           asp-route-currentFilter="@ViewData["CurrentFilter"]"
           class="@nextDisabled">
            <i class="fas fa-chevron-right"></i>
        </a>
    </div>
</section>

@section Scripts {
    <script>
        // Bar Chart - Average Salary by Industry
        const barCtx = document.getElementById('barChart').getContext('2d');
        const barChart = new Chart(barCtx, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Json.Serialize(ViewBag.Industries)),
                datasets: [{
                    label: 'Average Salary',
                    data: @Html.Raw(Json.Serialize(ViewBag.AvgSalaries)),
                    backgroundColor: 'rgba(72, 149, 239, 0.8)',
                    borderColor: 'rgba(72, 149, 239, 1)',
                    borderWidth: 1,
                    borderRadius: 10,
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                return 'R' + context.raw.toLocaleString();
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.7)',
                            callback: function (value) {
                                return 'R' + value.toLocaleString();
                            }
                        }
                    },
                    x: {
                        grid: {
                            display: false
                        },
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.7)'
                        }
                    }
                }
            }
        });

        // Line Chart - Salary vs Experience
        const lineCtx = document.getElementById('lineChart').getContext('2d');
        const lineChart = new Chart(lineCtx, {
            type: 'scatter',
            data: {
                datasets: [{
                    label: 'Salary vs Experience',
                    data: @Html.Raw(Json.Serialize(ViewBag.SalaryExperienceData)),
                    backgroundColor: 'rgba(75, 192, 192, 0.7)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    pointRadius: 8,
                    pointHoverRadius: 10
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                return 'Salary: R' + context.raw.y.toLocaleString() +
                                    ' (Exp: ' + context.raw.x + ' years)';
                            }
                        }
                    }
                },
                scales: {
                    y: {
                        title: {
                            display: true,
                            text: 'Salary',
                            color: 'rgba(255, 255, 255, 0.7)'
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.7)',
                            callback: function (value) {
                                return 'R' + value.toLocaleString();
                            }
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Years of Experience',
                            color: 'rgba(255, 255, 255, 0.7)'
                        },
                        grid: {
                            color: 'rgba(255, 255, 255, 0.1)'
                        },
                        ticks: {
                            color: 'rgba(255, 255, 255, 0.7)'
                        }
                    }
                }
            }
        });
    </script>
}